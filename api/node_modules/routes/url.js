/**
 * Created by brugnara on 09/06/16,
 * @ daniele@brugnara.me
 */

var Router = require('koa-router');
var chance = new (require('chance'))();
var koaBody = require('koa-body')();

var Incrementer = require('incrementer');
var urlNormalizer = require('url-normalizer');

var debug = require('debug')('url-shrtnr:routes:url');

const DEFAULT_LEN = 5; // 36mln urls
const MAX_RETRY = 10;

module.exports = function(options) {

  options = options || {};

  var router = new Router();
  var length = options.length || DEFAULT_LEN;

  if (!options.collections ||
    !options.collections.url || !options.collections.stats) {

    throw new Error('Missing collections url and stats!');

  }

  var incrementer = Incrementer(options.collections);

  router.post('/:url?', koaBody, function*(next) {

    var url = this.params.url || this.request.body.url;

    if (!url) {
      this.throw(new Error('Missing url!'));
    }

    var done = false;
    var count = 0;
    var body;

    url = urlNormalizer(url);

    do {
      var _id = chance.word({ length: length });

      // dup entry id _id is already in use. retry until one valid is found
      try {

        body = {
          _id: _id,
          url: url,
          date: new Date()
        };

        yield options.collections.url.insert(body);

        done = true;
        debug('_id valid: %s', _id);

      } catch(e) {
        debug('_id already in use: %s', _id);
        debug(e.message);
        if (count++ > MAX_RETRY) {
          this.throw(new Error('Max retry reached'));
        }
      }
    } while (!done);

    this.body =Â body;

    yield next;
  });

  router.get('/:id?', koaBody, function*(next) {

    if (!this.params.id) {
      debug('missing params.id');

      if (options.homepage) {
        debug('redirecting to homepage: %s', options.homepage);
        return this.redirect(options.homepage);
      }

      this.status = 404;
      this.body = 'Url not found';
      return;
    }

    var _id = (this.params.id || '').replace('+', '');

    var urlInfo = yield options.collections.url
      .find({_id: _id}).limit(1).next();

    if (!urlInfo) {
      this.status = 404;
      this.body = 'not found';
      return;
    }

    // same as bit.ly

    if (~this.params.id.indexOf('+')) {
      debug('showing urlInfo for: %s', urlInfo._id);
      this.body = urlInfo;
    } else {

      debug('302: redirecting user to: %s', urlInfo.url);

      if (!this.query.debug) {

        this.status = 302;
        this.redirect(urlInfo.url);

      } else {

        debug('debug mode, skipping url redirect to %s', urlInfo.url);

        this.body = {
          url: urlInfo.url,
          status: 302
        };

      }

      yield incrementer(_id, {
        request: this.request
      });

    }

    yield next;
  });

  return router;

};